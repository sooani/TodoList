plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.codestates'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

configurations {
    asciidoctorExtensions
}

dependencies {

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    implementation 'com.google.code.gson:gson'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT 기능을 위한 jjwt 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    configurations "asciidoctorExtensions"
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor            // (8-1)
    from file("${asciidoctor.outputDir}")   // (8-2)
    into file("src/main/resources/static/docs")   // (8-3)
    println "asciidoctor output: ${asciidoctor.outputDir}"
    from file("build/docs/asciidoc/")
}

build {
    dependsOn copyDocument  // (9)
}

// (10)
bootJar {
    enabled = true
    dependsOn copyDocument    // (10-1)
    from("${asciidoctor.outputDir}") {  // (10-2)
        into 'static/docs'     // (10-3)
    }
}